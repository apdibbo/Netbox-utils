#!/usr/bin/env python3

""" netbox2aquilon - script to extract data out of netbox and use it to create aquilon entities."""

import argparse
import subprocess
import sys

import requests
import pynetbox as nb

NETBOX_API = 'https://netbox.example.org/'
NETBOX_CERT_PATH = 'NETBOX_CERTIFICATE_PATH'  # certificate for netbox
NETBOX_TOKEN = 'TOKEN'

DEFAULT_ARCHETYPE = 'ral-tier1'  # change archetype if a cloud rack or system?
DEFAULT_OSNAME = 'rhel'
DEFAULT_OSVERSION = '7x-x86_64'
MACHINE_PREFIX = 'netbox-'
AQ_PATH = '/opt/aquilon/bin/aq.py'


# connect to NetBox and set up session
NETBOX_SESSION = requests.Session()
NETBOX_SESSION.verify = NETBOX_CERT_PATH
NETBOX = nb.api(NETBOX_API, token=NETBOX_TOKEN)
NETBOX.http_session = NETBOX_SESSION


def netbox_copy(opts):
    """
    Queries NetBox for a device based on it's MagDB system ID

    Takes 1 parameter:
    opts - a dict of options configured from commandline parameters
    """
    cmds = []

    # get device from NetBox based on their MagDB system ID
    hst = NETBOX.dcim.devices.get(cf_magdb_system_id=opts.magdb_id)
    if hst is None:
        return "Error - Device not found in NetBox"

    # check if device has a primary ip
    if hst.primary_ip is None:
        return "Error - No primary IP defined for host"
    # check if device has a tenant
    if hst.tenant is None:
        return "Error - No tenant defined for host"

    # check if host is in rack - query netbox for rack
    rack_id = hst.rack.id
    rack = NETBOX.dcim.racks.get(rack_id)
    if rack is None:
        return "Error - host not in rack?"

    # check facility_id is present
    if rack.facility_id is None:
        return "Error - no facility ID found for rack"

    cmds.append("add_machine --machine %s%d --model %s --rack %s-%s" % (
        MACHINE_PREFIX,
        hst.id,
        hst.device_type.slug,
        hst.site.facility.lower(),
        rack.facility_id,
    ))

    # next step is to add interfaces to the machine in Aquilon
    # We need to use 'filter' to retrieve the interface id for all interfaces
    # This will assume that the device name IS UNIQUE
    filter_interfaces = NETBOX.dcim.interfaces.filter(device=hst.name)

    if len(filter_interfaces) == 0:
        return "Error - No interfaces found"

    interfaces = []
    for i in filter_interfaces:
        interfaces.append(i.id)

    unusedintf = 0
    for intf in interfaces:
        interface = NETBOX.dcim.interfaces.get(intf)
        if interface.mac_address:
            cmds.append('add_interface --machine %s%d --mac %s --interface %s' % (
                MACHINE_PREFIX, hst.id, interface.mac_address, interface.name))
        else:
            unusedintf += 1

    if unusedintf > 0:
        print("# Note %s interfaces without mac address not included" % (unusedintf))

    if opts.sandbox:
        aqdesttype = 'sandbox'
        aqdestval = opts.sandbox
    elif opts.domain:
        aqdesttype = 'domain'
        aqdestval = opts.domain

    # Finally add the host to the machine
    cmds.append('add_host --hostname %s --machine %s%d --archetype %s --ip %s --personality %s-%s --%s %s --osname %s --osversion %s' % (
        hst.primary_ip.dns_name,
        MACHINE_PREFIX,
        hst.id,
        opts.archetype,
        hst.primary_ip.address.split('/')[0],
        hst.device_role.slug,
        hst.tenant.slug,
        aqdesttype,
        aqdestval,
        opts.osname,
        opts.osvers,
    ))

    for cmd in cmds:
        if opts.dryrun:
            print('aq ' + cmd)
        else:
            retval = subprocess.call([AQ_PATH]+cmd.split(' '))
            if retval != 0:
                sys.exit('Error: commmand %s %s exited with error code %d' % (AQ_PATH, cmd, retval))


if __name__ == "__main__":
    PARSER = argparse.ArgumentParser()

    AQDEST = PARSER.add_mutually_exclusive_group(required=True)
    AQDEST.add_argument(
        "--sandbox", "-s",
        help="Name of the sandbox in user/sandbox format to add the copied host to",
    )
    AQDEST.add_argument(
        "--domain", "-d",
        help="Name of the domain to add the copied host to",
    )
    PARSER.add_argument(
        "--hostname", "-n", required=True,
        help="Fully qualified domain name of host to copy from Netbox.",
    )
    PARSER.add_argument(
        "--archetype", "-a", default=DEFAULT_ARCHETYPE,
        help="Destination aquilon archetype for the host to be copied. Default: " + DEFAULT_ARCHETYPE,
    )
    PARSER.add_argument(
        "--magdb_id", "-m", required=True,
        help="MagDB system ID of host to copy from Netbox.",
    )
    PARSER.add_argument(
        "--osname", default=DEFAULT_OSNAME,
        help="Name of the Operating system on the host. Default: " + DEFAULT_OSNAME,
    )
    PARSER.add_argument(
        "--osvers", default=DEFAULT_OSVERSION,
        help="Version of the Operating system on the host. Default: " + DEFAULT_OSVERSION,
    )
    PARSER.add_argument(
        "--dryrun", action='store_true',
        help="Do not do anything to aquilon, instead print what would be done (currently true if not specified)",
    )
    OPTS, ARGS = PARSER.parse_known_args()

    print(netbox_copy(OPTS))
